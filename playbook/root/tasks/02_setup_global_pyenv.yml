---
- name: "Clone pyenv"
  git:
    repo: git://github.com/pyenv/pyenv.git
    dest: /usr/local/pyenv
    accept_hostkey: yes

- name: "Clone pyenv-virtualenv"
  git:
    repo: git://github.com/pyenv/pyenv-virtualenv.git
    dest: /usr/local/pyenv/plugins/pyenv-virtualenv
    accept_hostkey: yes

- name: "Write .bash_profile"
  blockinfile:
    path: ~/.bash_profile
    create: yes
    block: |
      export PYENV_ROOT="/usr/local/pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"

- name: "Write .bash_profile (skel)"
  blockinfile:
    path: /etc/skel/.bash_profile
    create: yes
    block: |
      export PYENV_ROOT="/usr/local/pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"

- name: "Check python version is available"
  shell: bash -lc "pyenv versions | grep {{ python_version }}"
  register: pyenv_version
  ignore_errors: yes
  changed_when: False

- name: "Install python"
  shell: bash -lc "pyenv install {{ python_version }}"
  when: pyenv_version is failed

- name: "Set global python"
  shell: bash -lc "pyenv global {{ python_version }}"
  when: pyenv_version is failed

  # - set_fact: ansible_python_interpreter=/usr/local/.pyenv/shims/python

  # Install libraries via pip
  # - pip: name={{ item.name }}
  #   with_items:
  #   - pip_pkg
  #   ignore_errors: yes
